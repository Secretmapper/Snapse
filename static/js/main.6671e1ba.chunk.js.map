{"version":3,"sources":["components/Layout/index.tsx","components/Graph/useAnimateEdges.ts","utils/classList/index.ts","components/Graph/index.tsx","automata/snapse/index.ts","components/Snapse/helpers.ts","components/Snapse/convert.ts","components/Snapse/index.tsx","components/Button/index.tsx","components/Typography/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Layout","props","Container","Side","side","Main","main","styled","div","useAnimateEdges","cyRef","useRef","useEffect","raf","cy","current","animOffset","animate","edges","style","requestAnimationFrame","cancelAnimationFrame","internal","hasClass","orig","className","match","RegExp","has","add","remove","reg","replace","stylesheet","selector","opacity","color","content","events","height","shape","width","ele","data","Graph","setCy","cyCBs","editingRef","editing","elements","id","map","item","classes","classList","onTap","onEdgeCreate","on","evt","edgehandles","handleNodes","preview","loopAllowed","edgeType","sourceNode","targetNode","edgesTo","empty","undefined","complete","src","dst","eles","cxtMenus","cxtMenu","cxtmenu","neurons","q1","spikes","rules","out","position","x","y","isOutput","q2","q3","q4","initializeState","neuron","delay","parseRule","rule","res","exec","requires","consumes","produces","delayStr","parseInt","length","areRulesValid","every","step","prevStates","hasTriggered","newStates","produce","states","spikeAdds","k","state","justResolvedRule","neuronOutKeys","bitstring","createNeuron","label","spike","time","rootId","parent","createOutput","output","createEdge","source","target","convert","neuronsState","prevState","concat","validRules","neuronCard","join","qId","InputContainer","RulesInput","textarea","SpikeInput","input","Snapse","previousNeuronsStateRef","value","ref","usePrevious","useMemo","useState","setEditing","inputRef","cbs","onSurfaceClick","renderedPosition","onCreateOutput","setNeurons","onEditNode","onDeleteNode","newNeurons","onDeleteEdge","prev","filter","val","cbsRef","commands","select","_","e","addedEles","left","top","onSubmit","preventDefault","spikeValue","spikeLabel","isNaN","trim","split","autoFocus","onChange","ed","placeholder","type","Button","button","Typography","p","shortening","keyframes","ProgressBar","isPlaying","css","Title","attrs","as","Subtitle","StepBackButton","PlayButton","StepForwardButton","App","initialNeurons","setIsPlaying","initialize","setNeuronsState","onForward","n","pBar","setPBar","onIntervalStepRef","interval","setInterval","clearInterval","onClick","key","window","localStorage","setItem","JSON","stringify","parse","getItem","Boolean","location","hostname","cytoscape","use","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6671e1ba.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nexport type ILayout = {\n  side: React.ReactElement\n  main: React.ReactElement\n}\n\nfunction Layout(props: ILayout) {\n  return (\n    <Container>\n      <Side>{props.side}</Side>\n      <Main>{props.main}</Main>\n    </Container>\n  )\n}\n\nexport default Layout\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  height: 100%;\n  width: 100%;\n`\nconst Main = styled.div`\n  flex-direction: column;\n  flex: 1;\n  height: 100%;\n`\nconst Side = styled.div`\n  flex-direction: column;\n  flex-shrink: 0;\n  height: 100%;\n  width: 250px;\n  z-index: 2;\n`\n","import { useEffect, useRef } from 'react'\nimport cytoscapejs from 'cytoscape'\n\nfunction useAnimateEdges() {\n  const cyRef = useRef<cytoscapejs.Core | null>(null)\n  const setCy = (internal: cytoscapejs.Core) => {\n    cyRef.current = internal\n  }\n\n  useEffect(() => {\n    const cy = cyRef.current\n    let raf: number\n    let animOffset = 0\n\n    function animate() {\n      animOffset++\n      if (cy) {\n        cy.edges().animate({\n          style: { 'line-dash-offset': -animOffset }\n        })\n      }\n      raf = requestAnimationFrame(animate)\n    }\n\n    animate()\n\n    return () => {\n      if (raf) {\n        cancelAnimationFrame(raf)\n      }\n    }\n  }, [])\n\n  return [cyRef, setCy] as const\n}\n\nexport default useAnimateEdges\n","export function hasClass(orig: string = '', className: string) {\n  return !!orig.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\n}\n\nexport function addClass(orig: string = '', className: string) {\n  if (!hasClass(orig, className)) {\n    return orig + ' ' + className\n  }\n  return orig\n}\n\nexport function removeClass(orig: string = '', className: string) {\n  if (hasClass(orig, className)) {\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\n    return orig.replace(reg, ' ')\n  }\n  return orig\n}\n\nexport default {\n  has: hasClass,\n  add: addClass,\n  remove: removeClass\n}\n","import React, { useEffect, useRef } from 'react'\nimport cytoscapejs from 'cytoscape'\nimport Cytoscape from 'react-cytoscapejs'\nimport useAnimateEdges from './useAnimateEdges'\nimport classList from '../../utils/classList'\n\ntype IGraph = {\n  elements: cytoscapejs.ElementDefinition[]\n  editing: { id?: string } | null\n  onTap?: (evt: cytoscapejs.EventObject) => void\n  onEdgeCreate?: (\n    src: cytoscapejs.NodeSingular,\n    dst: cytoscapejs.NodeSingular,\n    addedEles: cytoscapejs.EdgeCollection\n  ) => void\n  cxtMenus: CxtMenu[]\n}\ntype CxtMenu = any\n\nfunction Graph(props: IGraph) {\n  const [cyRef, setCy] = useAnimateEdges()\n  const cyCBs = useRef<any>()\n\n  const editingRef = useRef(props.editing)\n\n  let elements = props.elements\n  if (\n    editingRef.current !== props.editing ||\n    (editingRef.current &&\n      props.editing &&\n      editingRef.current.id !== props.editing.id)\n  ) {\n    elements = elements.map(item => {\n      if (props && props.editing) {\n        if (props.editing.id === item.data.id) {\n          item = {\n            ...item,\n            classes: classList.add(item.classes || '', 'node--editing')\n          }\n        } else {\n          item = {\n            ...item,\n            classes: classList.remove(item.classes || '', 'node--editing')\n          }\n        }\n      }\n      return item\n    })\n  }\n\n  cyCBs.current = { onTap: props.onTap, onEdgeCreate: props.onEdgeCreate }\n  useEffect(() => {\n    const cy = cyRef.current\n\n    const onTap = (evt: cytoscapejs.EventObject) => {\n      if (cyCBs.current.onTap) {\n        cyCBs.current.onTap(evt)\n      }\n    }\n    const onEdgeCreate: IGraph['onEdgeCreate'] = (src, dst, eles) => {\n      if (cyCBs.current.onEdgeCreate) {\n        cyCBs.current.onEdgeCreate(src, dst, eles)\n      }\n    }\n    if (cy) {\n      cy.on('tap', onTap)\n\n      // TODO: edgehandles is not generalized\n      cy.edgehandles({\n        handleNodes: '.snapse-node',\n        preview: false,\n        loopAllowed: () => true,\n        edgeType: function (sourceNode, targetNode) {\n          return sourceNode.edgesTo(targetNode).empty() ? 'flat' : undefined\n        },\n        complete: onEdgeCreate\n      })\n    }\n  }, [cyRef])\n  useEffect(() => {\n    const cy = cyRef.current\n    if (cy) {\n      // TODO: cxtMenus is not updated for prop\n      props.cxtMenus.map(cxtMenu => (cy as any).cxtmenu(cxtMenu))\n    }\n  }, [cyRef, props.cxtMenus])\n\n  return (\n    <Cytoscape\n      cy={setCy}\n      elements={elements}\n      style={{ width: '100%', height: '100%' }}\n      stylesheet={stylesheet}\n    />\n  )\n}\n\nconst stylesheet: cytoscapejs.Stylesheet[] = [\n  {\n    selector: '.node--editing',\n    style: {\n      opacity: 0\n    }\n  },\n  {\n    selector: '.snapse-node, .snapse-output',\n    style: {\n      'background-opacity': '0' as any,\n      'padding-top': '0',\n      'border-width': 0,\n      'text-halign': 'left',\n      'text-valign': 'top',\n      color: 'black',\n      content: 'data(label)'\n    }\n  },\n  {\n    selector: '.snapse-node__rules, .snapse-node__output',\n    style: {\n      'background-color': 'white',\n      'border-width': 1,\n      events: 'no',\n      'text-wrap': 'wrap',\n      'text-halign': 'center',\n      'text-valign': 'center',\n      content: 'data(label)',\n      height: 150,\n      shape: 'roundrectangle',\n      width: 100\n    }\n  },\n  {\n    selector: '.snapse-node__rules--invalid',\n    style: {\n      'background-color': '#ffbbbb',\n      'border-color': '#ff4e4d'\n    }\n  },\n  {\n    selector: '.snapse-node__output',\n    style: {\n      height: 50,\n      width: 150\n    }\n  },\n  {\n    selector: '.snapse-node__time, .snapse-node__spike',\n    style: {\n      'background-opacity': '0' as any,\n      'text-halign': 'center',\n      'text-valign': 'center',\n      content: 'data(label)',\n      events: 'no',\n      height: 15,\n      shape: 'roundrectangle',\n      width: 50\n    }\n  },\n  {\n    selector: 'edge',\n    style: {\n      'curve-style': 'bezier',\n      'target-arrow-shape': 'triangle',\n      'text-background-color': 'white',\n      'text-background-shape': 'rectangle',\n      width: 1\n    }\n  },\n  {\n    selector: '.node--value-increase, .node--value-decrease',\n    style: {\n      'transition-property': 'background-opacity',\n      'transition-duration': '0.5s' as any\n    }\n  },\n  {\n    selector: '.node--value-increase',\n    style: {\n      'background-color': '#A4DE02',\n      'background-opacity': 1,\n      content: ele => '▲' + ele.data('label')\n    }\n  },\n  {\n    selector: '.node--value-decrease',\n    style: {\n      'background-color': '#E0371F',\n      'background-opacity': 1,\n      color: 'white',\n      content: ele => '▼' + ele.data('label')\n    }\n  },\n  {\n    selector: '.node--triggering',\n    style: {}\n  },\n  {\n    selector: '.node--locked',\n    style: {\n      'background-color': '#eeeeee'\n    }\n  },\n  {\n    selector: '.edge--triggering',\n    style: {\n      'line-color': 'darkgreen',\n      'line-style': 'dashed',\n      'target-arrow-color': 'darkgreen',\n      width: 3\n    }\n  }\n]\n\nexport default Graph\n","import produce from 'immer'\n\ntype NeuronID = string\ntype NeuronRule = string\nexport type NeuronState = {\n  spikes: number\n  delay: number\n  bitstring?: string\n  rule?: NeuronRule\n  justResolvedRule?: NeuronRule\n}\n\ntype BaseNeuron = {\n  id: NeuronID\n  spikes: number\n  state?: NeuronState\n  position: { x: number; y: number }\n}\n\ntype NormalNeuron = BaseNeuron & {\n  rules: NeuronRule[]\n  out: NeuronID[]\n  isOutput: false\n}\n\ntype OutputNeuron = BaseNeuron & {\n  isOutput: true\n}\n\ntype Neuron = NormalNeuron | OutputNeuron\nexport type NeuronsMap = {\n  [k: string]: Neuron\n}\nexport type NeuronsStatesMap = {\n  [k: string]: NeuronState\n}\n\nexport const neurons: NeuronsMap = {\n  q1: {\n    id: 'q1',\n    spikes: 2,\n    rules: ['aa/aa->a;1'],\n    out: ['q2'],\n    position: { x: 300, y: 250 },\n    isOutput: false\n  },\n  q2: {\n    id: 'q2',\n    spikes: 2,\n    isOutput: true,\n    position: { x: 600, y: 450 }\n  },\n  q3: {\n    id: 'q3',\n    spikes: 1,\n    rules: ['a/a->a;2'],\n    out: ['q1', 'q4'],\n    position: { x: 100, y: 100 },\n    isOutput: false\n  },\n  q4: {\n    id: 'q4',\n    spikes: 1,\n    rules: ['a/a->a;4'],\n    out: ['q1', 'q3'],\n    position: { x: 100, y: 350 },\n    isOutput: false\n  }\n}\n\n// initialize state\nexport function initialize(neurons: NeuronsMap) {\n  const states: NeuronsStatesMap = {}\n  for (const k in neurons) {\n    const neuron = neurons[k]\n    states[k] = initializeState(neuron)\n  }\n  return states\n}\n\nexport function initializeState(neuron: Neuron) {\n  return {\n    spikes: neuron.spikes,\n    delay: 0\n  }\n}\n\ntype RuleMap = [number, number, number, number]\nexport function parseRule(rule: NeuronRule): RuleMap | false {\n  const re = /(a+)\\/(a+)->(a+);([0-9]+)/\n  const res = re.exec(rule)\n  if (res) {\n    const [, requires, consumes, produces, delayStr] = res\n    const delay = parseInt(delayStr, 10)\n    return [requires.length, consumes.length, produces.length, delay]\n  }\n\n  return false\n}\nexport function areRulesValid(rules: NeuronRule[]) {\n  return rules.every(parseRule)\n}\n\nexport function step(neurons: NeuronsMap, prevStates: NeuronsStatesMap) {\n  // let's us know if we're actually stepping\n  // through or the system has finished\n  let hasTriggered = false\n  const newStates = produce(prevStates, states => {\n    const spikeAdds: { [key: string]: number } = {}\n\n    for (const k in neurons) {\n      const neuron = neurons[k]\n      states[k] = states[k] || initializeState(neuron)\n\n      const state = states[k]\n      delete state.justResolvedRule\n\n      if (!neuron.isOutput) {\n        if (areRulesValid(neuron.rules)) {\n          if (state.delay > 0) {\n            hasTriggered = true\n            state.delay--\n\n            if (state.delay === 0) {\n              // resolve neuron\n              if (state.rule) {\n                const [, consumes, produces] = parseRule(state.rule) as RuleMap\n\n                state.spikes -= consumes\n                state.justResolvedRule = state.rule\n                delete state.rule\n\n                const neuronOutKeys = (neurons[k] as NormalNeuron).out\n                for (let k of neuronOutKeys) {\n                  spikeAdds[k] =\n                    k in spikeAdds ? spikeAdds[k] + produces : produces\n                }\n              }\n            }\n          } else if (state.delay === 0) {\n            if (neuron.out && neuron.out.length > 0) {\n              const rule = neuron.rules[0]\n              const [requires, , , delay] = parseRule(rule) as RuleMap\n\n              if (state.spikes === requires) {\n                hasTriggered = true\n                state.rule = rule\n                state.delay = delay\n              }\n            }\n          }\n        }\n      } else {\n        if (!(k in spikeAdds)) {\n          spikeAdds[k] = 0\n        }\n      }\n    }\n\n    for (const k in spikeAdds) {\n      if (!states[k].rule) {\n        states[k].spikes += spikeAdds[k]\n      }\n      if (k in neurons && neurons[k].isOutput) {\n        states[k].bitstring =\n          (states[k].bitstring || '') + (spikeAdds[k] || '0')\n      }\n    }\n  })\n\n  return hasTriggered ? newStates : prevStates\n}\n\nexport function stepBack(neurons: NeuronsMap, nextStates: NeuronsStatesMap) {\n  // TODO: This produces wrong output if the resolved rules are missing\n  return produce(nextStates, states => {\n    const spikeAdds: { [key: string]: number } = {}\n\n    for (const k in neurons) {\n      const neuron = neurons[k]\n      const state = states[k]\n\n      if (!neuron.isOutput) {\n        if (state.delay === 0) {\n          // resolved neuron\n          if (state.justResolvedRule) {\n            const [, consumes, produces] = parseRule(\n              state.justResolvedRule\n            ) as RuleMap\n            state.spikes += consumes\n            state.rule = state.justResolvedRule\n            state.delay++\n            delete state.justResolvedRule\n\n            const neuronOutKeys = (neurons[k] as NormalNeuron).out\n            for (let k of neuronOutKeys) {\n              spikeAdds[k] = k in spikeAdds ? spikeAdds[k] + produces : produces\n            }\n          }\n        } else if (state.rule) {\n          // running a rule\n          const [, , , delay] = parseRule(state.rule) as RuleMap\n          // it just started running\n          if (state.delay === delay) {\n            delete state.rule\n            state.delay = 0\n          } else {\n            state.delay++\n          }\n        }\n      } else {\n        state.bitstring = state.bitstring?.slice(0, -1)\n        if (state.bitstring?.length === 0) {\n          delete state.bitstring\n        }\n      }\n    }\n\n    for (const k in spikeAdds) {\n      states[k].spikes -= spikeAdds[k]\n    }\n  })\n}\n","import cytoscapejs from 'cytoscape'\n\nexport const createNeuron = (\n  id: string,\n  x: number,\n  y: number,\n  label: string,\n  rules: string,\n  spike: number,\n  time: number,\n  classes: string = ''\n): cytoscapejs.ElementDefinition[] => [\n  {\n    data: { rootId: id, id: `${id}`, label },\n    classes: 'snapse-node',\n    position: { x: 0, y: 0 }\n  },\n  {\n    data: { rootId: id, id: `${id}-rules`, parent: id, label: rules },\n    classes: 'snapse-node__rules',\n    position: { x, y: y }\n  },\n  {\n    data: { rootId: id, id: `${id}-spike`, parent: id, label: spike },\n    classes: 'snapse-node__spike',\n    position: { x, y: y + 60 }\n  },\n  {\n    data: { rootId: id, id: `${id}-time`, parent: id, label: time },\n    classes: 'snapse-node__time',\n    position: { x, y: y + 90 }\n  }\n]\n\nexport const createOutput = (\n  id: string,\n  x: number,\n  y: number,\n  label: string,\n  output: string,\n  spike: number\n): cytoscapejs.ElementDefinition[] => [\n  {\n    data: { rootId: id, id: `${id}`, label },\n    classes: 'snapse-output',\n    position: { x: 0, y: 0 }\n  },\n  {\n    data: { rootId: id, id: `${id}-output`, parent: id, label: output },\n    classes: 'snapse-node__output',\n    position: { x, y: y }\n  },\n  {\n    data: { rootId: id, id: `${id}-spike`, parent: id, label: spike },\n    classes: 'snapse-node__spike',\n    position: { x, y: y + 40 }\n  }\n]\n\nexport const createEdge = (source: string, target: string) => [\n  {\n    data: {\n      id: `${source}-${target}`,\n      source,\n      target\n    },\n    classes: ''\n  }\n]\n","import cytoscapejs from 'cytoscape'\nimport {\n  initializeState,\n  NeuronState,\n  NeuronsMap,\n  NeuronsStatesMap,\n  areRulesValid\n} from '../../automata/snapse'\nimport { createEdge, createNeuron, createOutput } from './helpers'\nimport classList from '../../utils/classList'\n\nfunction convert(\n  neurons: NeuronsMap,\n  neuronsState: NeuronsStatesMap,\n  prevStates: NeuronsStatesMap = {}\n): cytoscapejs.ElementDefinition[] {\n  let elements: cytoscapejs.ElementDefinition[] = []\n\n  for (let k in neurons) {\n    const neuron = neurons[k]\n    const state: NeuronState = neuronsState[k] || initializeState(neuron)\n    const prevState = prevStates[neuron.id]\n\n    if (!neuron.isOutput) {\n      const validRules = areRulesValid(neuron.rules)\n      const neuronCard = createNeuron(\n        neuron.id,\n        neuron.position.x,\n        neuron.position.y,\n        neuron.id,\n        neuron.rules.join('\\n'),\n        state.spikes,\n        state.delay\n      )\n      if (!validRules) {\n        neuronCard[1].classes = classList.add(\n          neuronCard[1].classes,\n          'snapse-node__rules--invalid'\n        )\n      }\n      if (prevState) {\n        if (prevState.spikes < state.spikes) {\n          neuronCard[2].classes = classList.add(\n            neuronCard[2].classes,\n            'node--value-increase'\n          )\n        } else if (prevState.spikes > state.spikes) {\n          neuronCard[2].classes = classList.add(\n            neuronCard[2].classes,\n            'node--value-decrease'\n          )\n        }\n\n        if (prevState.delay < state.delay) {\n          neuronCard[3].classes = classList.add(\n            neuronCard[3].classes,\n            'node--value-increase'\n          )\n        } else if (prevState.delay > state.delay) {\n          neuronCard[3].classes = classList.add(\n            neuronCard[3].classes,\n            'node--value-decrease'\n          )\n        }\n      }\n      if (state.rule) {\n        neuronCard[1].classes = classList.add(\n          neuronCard[1].classes,\n          'node--locked'\n        )\n      }\n      if (state.justResolvedRule) {\n        neuronCard[1].classes = classList.add(\n          neuronCard[1].classes,\n          'node--triggering'\n        )\n      }\n      elements = elements.concat(neuronCard)\n      if (neuron.out) {\n        for (let out of neuron.out) {\n          const edges = createEdge(neuron.id, out)\n          if (state.justResolvedRule) {\n            edges[0].classes = classList.add(\n              edges[0].classes,\n              'edge--triggering'\n            )\n          }\n          elements = elements.concat(edges)\n        }\n      }\n    } else {\n      elements = elements.concat(\n        createOutput(\n          neuron.id,\n          neuron.position.x,\n          neuron.position.y,\n          neuron.id,\n          state.bitstring || '',\n          state.spikes\n        )\n      )\n    }\n  }\n\n  return elements\n}\n\nexport default convert\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\nimport cytoscapejs from 'cytoscape'\nimport Graph from '../Graph'\nimport styled from 'styled-components'\nimport { NeuronsMap, NeuronsStatesMap } from '../../automata/snapse'\nimport convert from './convert'\n\nlet qId = 5\n\ntype Position = {\n  x: number\n  y: number\n}\ntype EditingState = {\n  id?: string\n  position: Position\n  renderedPosition: Position\n  rules: string\n  spike: string\n}\n\nexport type ISnapse = {\n  neurons: NeuronsMap\n  neuronsState: NeuronsStatesMap\n  setNeurons: Dispatch<SetStateAction<NeuronsMap>>\n}\n\nfunction usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref\n}\nfunction Snapse(props: ISnapse) {\n  const previousNeuronsStateRef = usePrevious(props.neuronsState)\n  const elements = useMemo(\n    () =>\n      convert(\n        props.neurons,\n        props.neuronsState,\n        previousNeuronsStateRef.current\n      ),\n    [props.neurons, props.neuronsState, previousNeuronsStateRef]\n  )\n\n  const [editing, setEditing] = useState<EditingState | null>(null)\n\n  const inputRef = useRef<HTMLTextAreaElement>(null)\n  const onSubmitForm = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (editing) {\n      const spikeValue = parseInt(editing.spike, 10)\n      const spikeLabel = isNaN(spikeValue) ? 0 : spikeValue\n\n      if (editing.id != null) {\n        const id = editing.id\n        props.setNeurons(neurons => ({\n          ...neurons,\n          [id]: {\n            ...neurons[id],\n            rules: editing.rules.trim().split('\\n'),\n            spikes: spikeLabel\n          }\n        }))\n      } else {\n        // create a new node\n        const id = `q${qId++}`\n        props.setNeurons(neurons => ({\n          ...neurons,\n          [id]: {\n            id,\n            spikes: spikeLabel,\n            position: {\n              x: editing.position.x,\n              y: editing.position.y\n            },\n            rules: editing.rules.trim().split('\\n'),\n            out: [],\n            isOutput: false\n          }\n        }))\n      }\n      setEditing(null)\n    }\n  }\n  const onRulesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const rules = e.target.value\n    setEditing(ed => (ed ? { ...ed, rules } : null))\n  }\n  const onSpikeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const spike = e.target.value\n    setEditing(ed => (ed ? { ...ed, spike } : null))\n  }\n  const onEditNode = (\n    id: string,\n    renderedPosition: Position,\n    position: Position\n  ) => {\n    const neuron = props.neurons[id]\n    if (!neuron.isOutput) {\n      const rules = neuron.rules\n      const spike = neuron.spikes\n\n      setEditing({\n        id,\n        renderedPosition,\n        position,\n        rules: rules.join('\\n'),\n        spike: `${spike}`\n      })\n    }\n  }\n  const onDeleteNode = (id: string) => {\n    props.setNeurons(neurons => {\n      const newNeurons = { ...neurons }\n      delete newNeurons[id]\n      return newNeurons\n    })\n  }\n  const onDeleteEdge = (source: string, target: string) => {\n    props.setNeurons(prev => {\n      const neurons = { ...prev }\n      const neuron = { ...neurons[source] }\n      if (neuron.isOutput === false) {\n        neuron.out = neuron.out.filter(val => val !== target)\n      }\n      return neurons\n    })\n  }\n\n  const onSurfaceClick = (renderedPosition: Position, position: Position) => {\n    setEditing({\n      renderedPosition,\n      position,\n      rules: '',\n      spike: ''\n    })\n  }\n  const onCreateOutput = (position: Position) => {\n    const id = `q${qId++}`\n    props.setNeurons(neurons => ({\n      ...neurons,\n      [id]: {\n        id,\n        spikes: 1,\n        position,\n        isOutput: true\n      }\n    }))\n  }\n  const onEdgeCreate = (src: string, dst: string) => {\n    const id = src\n    props.setNeurons(prev => {\n      const neurons = { ...prev }\n      const neuron = { ...neurons[id] }\n      if (neuron.isOutput === false) {\n        neuron.out = [...neuron.out, dst]\n      }\n      neurons[id] = neuron\n      return neurons\n    })\n  }\n\n  const cbs = {\n    onSurfaceClick,\n    onCreateOutput,\n    onEditNode,\n    onDeleteNode,\n    onDeleteEdge\n  }\n  const cbsRef = useRef(cbs)\n  cbsRef.current = cbs\n  const cxtMenus = useMemo(\n    () => [\n      {\n        selector: 'core',\n        commands: [\n          {\n            content: 'Create Node',\n            select: function (_: any, e: cytoscapejs.EventObject) {\n              cbsRef.current.onSurfaceClick(e.renderedPosition, e.position)\n            }\n          },\n          {\n            content: 'Create Output',\n            select: function (_: any, e: cytoscapejs.EventObject) {\n              cbsRef.current.onCreateOutput(e.position)\n            }\n          }\n        ]\n      },\n      {\n        selector: 'node',\n        commands: [\n          {\n            content: 'Edit Node',\n            select: function (ele: cytoscapejs.NodeSingular) {\n              cbsRef.current.onEditNode(\n                ele.id(),\n                ele.renderedPosition(),\n                ele.position()\n              )\n            }\n          },\n          {\n            content: 'Delete Node',\n            select: function (ele: cytoscapejs.NodeSingular) {\n              cbsRef.current.onDeleteNode(ele.id())\n            }\n          }\n        ]\n      },\n      {\n        selector: 'edge',\n        commands: [\n          {\n            content: 'Delete Edge',\n            select: function (ele: cytoscapejs.NodeSingular) {\n              cbsRef.current.onDeleteEdge(\n                ele.data('source'),\n                ele.data('target')\n              )\n            }\n          }\n        ]\n      }\n    ],\n    [cbsRef]\n  )\n\n  return (\n    <Container>\n      <Graph\n        elements={elements}\n        editing={editing}\n        cxtMenus={cxtMenus}\n        onEdgeCreate={(\n          src: cytoscapejs.NodeSingular,\n          dst: cytoscapejs.NodeSingular,\n          addedEles: cytoscapejs.EdgeCollection\n        ) => {\n          onEdgeCreate(src.id(), dst.id())\n          // let's remove the added elements\n          // and let our passed props recreate it\n          addedEles.remove()\n        }}\n      />\n      {editing && (\n        <InputContainer\n          style={{\n            left: editing?.renderedPosition.x,\n            top: editing?.renderedPosition.y\n          }}>\n          <form onSubmit={onSubmitForm}>\n            <div>\n              <label>Rules</label>\n            </div>\n            <div>\n              <RulesInput\n                autoFocus\n                ref={inputRef}\n                value={editing?.rules}\n                onChange={onRulesChange}\n              />\n            </div>\n            <div>\n              <label>Initial Spikes</label>\n            </div>\n            <div>\n              <SpikeInput\n                placeholder=\"0\"\n                type=\"number\"\n                value={editing?.spike}\n                onChange={onSpikeChange}\n              />\n            </div>\n            <div>\n              <button>Save Node</button>\n            </div>\n          </form>\n        </InputContainer>\n      )}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  position: relative;\n  flex: 1;\n  width: 100%;\n  height: 100%;\n`\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  text-align: center;\n  transform: translate3d(-50%, -50%, 0);\n`\n\nconst RulesInput = styled.textarea`\n  background-color: rgba(244, 244, 244, 1);\n  height: 150px;\n  margin: 2px;\n  outline-width: thin;\n  text-align: center;\n  width: 100px;\n`\n\nconst SpikeInput = styled.input`\n  background-color: rgba(244, 244, 244, 1);\n  margin: 2px;\n  outline-width: thin;\n  text-align: center;\n`\n\nexport default Snapse\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n  background-color: #007bff;\n  border-color: #007bff;\n  border-radius: 4px;\n  border: 0;\n  color: #fff;\n  cursor: pointer;\n  display: block;\n  font-size: 14px;\n  margin-bottom: 4px;\n  padding: 8px;\n  text-transform: uppercase;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  width: 100%;\n  &:hover {\n    color: #fff;\n    background-color: #0069d9;\n    border-color: #0062cc;\n  }\n  &:focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n  }\n  &:active {\n    background-color: #0062cc;\n    border-color: #005cbf;\n  }\n`\n\nexport default Button\n","import styled from 'styled-components'\n\nconst Typography = styled.p`\n  font-family: montserrat;\n  font-weight: 400;\n`\n\nexport default Typography\n","import React, { useEffect, useRef, useState } from 'react'\nimport styled, { css, keyframes } from 'styled-components'\nimport Layout from '../Layout'\nimport Snapse from '../Snapse'\nimport {\n  initialize,\n  neurons as initialNeurons,\n  NeuronsMap,\n  step\n} from '../../automata/snapse'\nimport Button from '../Button'\nimport Typography from '../Typography'\n\nfunction App() {\n  const [neurons, setNeurons] = useState(initialNeurons)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [neuronsState, setNeuronsState] = useState(() => initialize(neurons))\n\n  const onTogglePlay = () => {\n    setIsPlaying(p => !p)\n  }\n  const onBack = (n: NeuronsMap = neurons) => {\n    // setNeuronsState(neuronsState => stepBack(n, neuronsState))\n  }\n  const onForward = (n: NeuronsMap = neurons) => {\n    setNeuronsState(neuronsState => step(n, neuronsState))\n  }\n\n  const [pBar, setPBar] = useState(0)\n  const neuronsRef = useRef(neurons)\n  neuronsRef.current = neurons\n  const onIntervalStepRef = useRef(onForward)\n  onIntervalStepRef.current = () => {\n    onForward(neurons)\n    setPBar(p => p + 1)\n  }\n  useEffect(() => {\n    let interval: NodeJS.Timeout\n\n    if (isPlaying) {\n      interval = setInterval(() => {\n        onIntervalStepRef.current()\n      }, 1000)\n    }\n\n    return () => clearInterval(interval)\n  }, [isPlaying, onIntervalStepRef])\n\n  const onSave = () => {\n    window.localStorage.setItem('neurons', JSON.stringify(neurons))\n  }\n  const onLoad = () => {\n    setNeurons(JSON.parse(window.localStorage.getItem('neurons') || ''))\n  }\n  const onReset = () => {\n    setNeurons(initialNeurons)\n  }\n\n  return (\n    <Layout\n      main={\n        <Snapse\n          neurons={neurons}\n          neuronsState={neuronsState}\n          setNeurons={setNeurons}\n        />\n      }\n      side={\n        <Container>\n          <Title>Snapse</Title>\n          <Subtitle>\n            Modern Spiking Neural P systems Maker and Visualizer\n          </Subtitle>\n          <StepBackButton onClick={() => onBack()}>Back</StepBackButton>\n          <ProgressBar key={pBar} isPlaying={isPlaying} />\n          <PlayButton onClick={onTogglePlay}>\n            {isPlaying ? 'Pause' : 'Play'}\n          </PlayButton>\n          <StepForwardButton onClick={() => onForward()}>\n            Forward\n          </StepForwardButton>\n          <br />\n          <br />\n          <br />\n          <br />\n          <Button onClick={onSave}>Save</Button>\n          <Button onClick={onLoad}>Load</Button>\n          <Button onClick={onReset}>Reset</Button>\n        </Container>\n      }\n    />\n  )\n}\n\nconst shortening = keyframes`\n  from {\n    transform: scaleX(100%);\n  }\n\n  to {\n    transform: scaleX(0%);\n  }\n`\nconst ProgressBar = styled.div<{ isPlaying: boolean }>`\n  ${props =>\n    props.isPlaying &&\n    css`\n      animation: ${shortening} 1s linear;\n    `}\n  background-color: red;\n  height: 4px;\n  transform-origin: left center;\n  width: 100%;\n`\n\nconst Container = styled.div`\n  border-style: solid;\n  border-width: 0;\n  border-right-width: 1px;\n  border-color: #e1e4e8;\n  padding: 20px;\n  height: 100%;\n`\nconst Title = styled(Typography).attrs(() => ({ as: 'h1' }))`\n  margin: 0;\n  text-align: center;\n`\nconst Subtitle = styled(Typography).attrs(() => ({ as: 'h3' }))`\n  font-size: 13px;\n  text-align: center;\n  margin-top: 4px;\n  margin-bottom: 8px;\n`\nconst StepBackButton = styled(Button)``\nconst PlayButton = styled(Button)``\nconst StepForwardButton = styled(Button)``\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'typeface-montserrat'\nimport cytoscape from 'cytoscape'\nimport cxtmenu from 'cytoscape-cxtmenu'\nimport edgehandles from 'cytoscape-edgehandles'\n\ncytoscape.use(cxtmenu)\ncytoscape.use(edgehandles as any)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}